"""
Django settings for chatbot project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from decouple import config
from helpers import helper

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ucsw^+169v9u29ip4x@n+t8gknapg0!7ur&p-1m0luv^uj1f14'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'recommendation',
    'channels'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

SESSION_ENGINE = "django.contrib.sessions.backends.db"

ROOT_URLCONF = 'chatbot.urls'

# For logging
LOGGER_LIST = ['chatbot','recommendation']

LOGGER_CONTENT= {
            'handlers': ['file_handler','console'],
            'level': 'DEBUG',
            'propagate': True,
        }

# Logging details
helper.create_dir(os.path.join(BASE_DIR,'logs'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'server_format': {
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            #'format': '[%(asctime)s] [%(levelname)s] %(name)s %(user)s_%(session_id)s:-> %(message)s',
            'format': '[%(asctime)s] [%(levelname)s] [%(name)s] [PID:%(process)d_%(thread)d]--> %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'console_format': {
            'format': '[%(asctime)s]: %(levelname)s: [%(name)s]-> %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },

    },
    'handlers': {
        'file_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR,'logs','chatbot.log'),
            'maxBytes': 1024*1024*15,            #15 MB
            'formatter': 'server_format',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'console_format'
        },

    },
    'loggers': { logger:LOGGER_CONTENT for logger in LOGGER_LIST}
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot.wsgi.application'
ASGI_APPLICATION = "chatbot.routing.application" 

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD':config('DB_PASSWORD'),
        'HOST': 'localhost',
        'PORT' : '3306',
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    ]

STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

MEDIA_ROOT = 'media'
MEDIA_URL = '/media/'

helper.create_dir(os.path.join(BASE_DIR, MEDIA_ROOT))


# CELERY SETTINGS
BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# For django channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [("127.0.0.1", 6379)],
            "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
        },
    },
}


### Process ########################
BASE_DIR = os.getcwd()

PROCESS_FOLDER = os.path.join(BASE_DIR, 'process')
IMAGES_FOLDER =  'images'
PAGE_SOURCE_FOLDER = 'page_sources'

SOURCE_IMAGE_PATH = os.path.join(IMAGES_FOLDER, 'source_image.jpeg')
IMAGE_FILE_NAME_FORMAT = '{}.jpeg'

RECOMMEDATION_HTML_FILE = 'recommendation.html'
RECOMMENDATION_SCREENSHOT =  'recom.png'
########################################


## MARKET PLACE DETAILS ######################################

AMAZON_PAGE_SOURCE = 'amazon.html'
EBAY_PAGE_SOURCE = 'ebay.html'
GOOGLE_PAGE_SOURCE = 'google.html'
WALMART_PAGE_SOURCE = 'walmart.html'
####################################


GECKO_DRIVER_PATH = os.path.join('bin', 'geckodriver')

### SERP URL #########################

AMAZON_SERP_QUERY_STRING =  "https://www.amazon.com.au/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords={}"
GOOGLE_SERP_QUERY_STRING = "https://www.google.com/search?output=search&tbm=shop&tbs=vw:l&q={}"
EBAY_SERP_QUERY_STRING = "https://www.ebay.com.au/sch/i.html?_nkw={}"
WALMART_SERP_QUERY_STRING = "https://www.walmart.com/search/?query={}"


######################################


### SERP DETAILS #####################
MAX_SERP_LIST_COUNT = 10

SERP_PRODUCT_CATALOG_HEADERS = ['Name','Url','Image','Price','Platform']
TOP_N_PICKS = 3
######################################

### SIMILARITY PROCESS######################
IMAGE_WEIGHTAGE = 2
TEXT_WEIGHTAGE = 1
#####################################

